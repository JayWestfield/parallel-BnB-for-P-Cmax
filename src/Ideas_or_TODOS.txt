startup (sorting filling ret etc) do asnc / in parallel

might recompute the irrelevance index on lowerBound update, but not sure 

run more heuristics for a better upper bound and use one thread etc to compute a better lower bound because they are crucial
for bigger instances the memory management of STIMPL needs imporvement 
test curretn vs one gib hashmap

TODO rule for the same job size (not in the end)

Debugging Question:

there the programm does not continue 
wait for tasks to finish 192 239 281  => 9 5 2  Job: 8

both children:
child from recursion 248 239 281  => 4 3 2  Job: 9 
this has a gist  2 239 248 281  => 4 3 2  Job: 9

child from recursion 192 295 281  => 6 2 1  Job: 9
this has a gist  2 192 281 295  => 6 2 1  Job: 9

(no third child because 56 + 281 = 337 > 318 current upper Bound)
but the taskgroup does not resume why

last bound update in line 14443

reason for a delayed task add Prev 42 15 2 

delayed task:
suspend 97 191 282  => 42 15 2  Job: 6

make the try/cathc actions better /less

STImpl needs to adapt to the addPrev.../extended

tbb tasks schienen recht heavy zu sein (muss den ganzen context speichern etc) 
evtl eigenens work stealing mit light weight tasks (loads, job, corresponding taskgroup counter, priority [even if there are only 2 priorities]) that should be enough context


TODO plots Ã¼berarbeiten farben etc

the storage checks should not happen on every add gist only once in a while and only check the total pages once 

easy improvements:
clean/structure code also with midifiability (addprev etc)
storage checks
remove timing on bounds?
cleanup not in the timed run
parallel start (lpt etc is sequential)
TODO rule for the same job size (not in the end)